# 加密函数
def encrypt(v, k):
    # v是64位的明文，k是128位的密钥，都是32位无符号整数的数组
    v0, v1 = v[0], v[1] # 把明文分成两个32位的部分
    k0, k1, k2, k3 = k[0], k[1], k[2], k[3] # 把密钥分成四个32位的部分
    sum = 0 # 初始化累加器
    delta = 0x9e3779b9 # 定义一个常数，是黄金分割数的乘积
    for i in range(32): # 进行32轮的迭代
        sum += delta # 累加器加上常数
        v0 += ((v1 << 4) + k0) ^ (v1 + sum) ^ ((v1 >> 5) + k1) # 对v0进行加密
        v1 += ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3) # 对v1进行加密
    return v0, v1 # 返回加密后的两个32位的部分

# 解密函数
def decrypt(v, k):
    # v是64位的密文，k是128位的密钥，都是32位无符号整数的数组
    v0, v1 = v[0], v[1] # 把密文分成两个32位的部分
    k0, k1, k2, k3 = k[0], k[1], k[2], k[3] # 把密钥分成四个32位的部分
    delta = 0x9e3779b9 # 定义一个常数，是黄金分割数的乘积
    sum = delta * 32 # 初始化累加器，是常数的32倍
    for i in range(32): # 进行32轮的迭代
        v1 -= ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3)&0xFF # 对v1进行解密
        v0 -= ((v1 << 4) + k0) ^ (v1 + sum) ^ ((v1 >> 5) + k1)&0xFF# 对v0进行解密
        sum -= delta # 累加器减去常数
    return v0, v1 # 返回解密后的两个32位的部分

# 主函数
if __name__ == '__main__':
    # 定义一个明文和一个密钥
    c = [0x49BF1BED,0xB31C6C52]
    k = [ 0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476]
    # 调用加密函数，得到密文
    # 打印密文
    # 调用解密函数，得到明文
    m = decrypt(c, k)
    # 打印明文
    print("明文是：", hex(m))
